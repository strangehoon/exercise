# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main", "develop" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:

      - name: checkout
        uses: actions/checkout@v3

      # JDK version 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## create application-database.yaml
      - name: make application-database.yaml
        run: |
          cd ./src/main/resources
          
          touch ./application.yml
          
          # GitHub-Actions 에서 설정한 값을 application.yml 파일에 쓰기
          echo "${{ secrets.DATABASE }}" > ./application.yml
        shell: bash

      # Build
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: build

      # Docker 이미지 빌드
      - name: Build Docker image
        run: |
          docker build -t strangehoon2 .
        working-directory: ./path/to/dockerfile



      ## Slack 알람(빌드)
      - name: Slack 알람 발송
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: general
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 빌드 결과 => ${{ job.status }}
          SLACK_TITLE: 빌드 결과 알람
          SLACK_USERNAME: Notification-Bot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

      # AWS에 연결해줍니다.
      - name: AWS 연결
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Docker 이미지를 압축하여 S3에 업로드
      - name: Upload Docker image to S3
        run: |
          docker save strangehoon2 | gzip > strangehoon2.tar.gz
          aws s3 cp strangehoon2.tar.gz s3://backend-app-bucket/strangehoon2.tar.gz

      # CodeDelploy에 배포를 요청합니다.
      - name: Code Deploy 배포 요청
          ## 애플리케이션 이름
        run: aws deploy create-deployment --application-name seniors
          --deployment-config-name CodeDeployDefault.OneAtATime
          ## 배포 그룹 이름
          --deployment-group-name seniors  
          --s3-location bucket=backend-app-bucket,bundleType=zip,key=spring-build.zip














      ## docker compose up
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/exercise
            sudo docker pull ${{ secrets.DOCKER_REPO }}/nginx
            docker-compose up -d
            docker image prune -f    

      ## Slack 알람(배포)
      - name: Slack 알람 발송
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: general
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 배포 결과 => ${{ job.status }}
          SLACK_TITLE: 배포 결과 알람
          SLACK_USERNAME: Notification-Bot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        # 이 구문을 추가해야 빌드 성공 실패와 상관없이 동작합니다.
        if: always()